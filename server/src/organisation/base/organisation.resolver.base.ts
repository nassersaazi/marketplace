/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOrganisationArgs } from "./CreateOrganisationArgs";
import { UpdateOrganisationArgs } from "./UpdateOrganisationArgs";
import { DeleteOrganisationArgs } from "./DeleteOrganisationArgs";
import { OrganisationFindManyArgs } from "./OrganisationFindManyArgs";
import { OrganisationFindUniqueArgs } from "./OrganisationFindUniqueArgs";
import { Organisation } from "./Organisation";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { User } from "../../user/base/User";
import { OrganisationService } from "../organisation.service";

@graphql.Resolver(() => Organisation)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OrganisationResolverBase {
  constructor(
    protected readonly service: OrganisationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "any",
  })
  async _organisationsMeta(
    @graphql.Args() args: OrganisationFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Organisation])
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "any",
  })
  async organisations(
    @graphql.Args() args: OrganisationFindManyArgs
  ): Promise<Organisation[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Organisation, { nullable: true })
  async organisation(
    @graphql.Args() args: OrganisationFindUniqueArgs
  ): Promise<Organisation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Organisation)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "create",
    possession: "any",
  })
  async createOrganisation(
    @graphql.Args() args: CreateOrganisationArgs
  ): Promise<Organisation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        createdBy: {
          connect: args.data.createdBy,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Organisation)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async updateOrganisation(
    @graphql.Args() args: UpdateOrganisationArgs
  ): Promise<Organisation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          createdBy: {
            connect: args.data.createdBy,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Organisation)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "delete",
    possession: "any",
  })
  async deleteOrganisation(
    @graphql.Args() args: DeleteOrganisationArgs
  ): Promise<Organisation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Service])
  @nestAccessControl.UseRoles({
    resource: "Service",
    action: "read",
    possession: "any",
  })
  async services(
    @graphql.Parent() parent: Organisation,
    @graphql.Args() args: ServiceFindManyArgs
  ): Promise<Service[]> {
    const results = await this.service.findServices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async createdBy(
    @graphql.Parent() parent: Organisation
  ): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
